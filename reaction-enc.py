# Auto-generated loader â€” decodes base64 and executes
import base64, sys
b64 = "import os
import requests as rq
import requests as rx
import requests
import time
import random
from threading import Lock
from concurrent.futures import ThreadPoolExecutor
from queue import Queue
import re
import os
import json
from datetime import datetime, timedelta
import string
import random
import string
import uuid
import requests
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urlparse, parse_qs
from pathlib import Path
import requests
import json
import sys
import os
import platform
import re
import threading
import requests as rq
import requests as rq
import threading
from concurrent.futures import ThreadPoolExecutor
import time, random

# Softer ANSI colors
blue = "\033[34m"     # dark blue
red = "\033[31m"      # dark red
yellow = "\033[33m"   # dark yellow
green = "\033[32m"    # green
reset = "\033[0m"
orange = "\033[38;5;208m"  # candy-orange-like
file_lock = threading.Lock()
purple = "\033[1;35m"
violet_chu = "\033[1;35m"
darkblue = "\033[34m"
green = "\033[1;32m"
RED = "\033[1;31m"
YELLOW = "\033[1;33m"
SKYBLUE = "\033[1;36m"
BLUE = "\033[1;34m"
LIGHTBLUE = "\033[38;5;81m"
hotpink = "\033[38;5;197m"
light_magenta = "\033[38;5;174m"
WHITE = "\033[1;37m"
lavender = "\033[38;5;189m"
rasp = "\033[38;5;22m"
DARKBLUE = "\033[34m"
GREEN = "\033[1;32m"
white = "\033[1;37m"
# Define colors
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
BLUE = "\033[1;34m"
WHITE = "\033[1;37m"
RESET = "\033[0m"

def resolve_pfbid_to_numeric(post_url, ua):
    """
    Resolve a pfbid or share URL to numeric post ID.
    """
    headers = {
        "User-Agent": ua,
        "Accept": "text/html"
    }

    try:
        response = requests.get(post_url, headers=headers, timeout=10, allow_redirects=True)
        html = response.text

        # Look for numeric post ID in meta tags or JS
        match = re.search(r'/posts/(\d+)', html)
        if match:
            return match.group(1)

        match = re.search(r'"postID":"(\d+)"', html)
        if match:
            return match.group(1)

        # fallback: return original URL if not found
        return post_url

    except Exception as e:
        print(f"Error resolving pfbid: {e}")
        return post_url
    
def extract_user_id_prof(url, ua=None, access_token=None):
    """
    Extract numeric user ID from a Facebook profile URL.
    Supports numeric ID URLs and username URLs.
    If a username is used, a Graph API request is made to get numeric ID.
    """
    url = url.strip()
    
    # First, try numeric ID in profile.php?id= or ?id=
    match = re.search(r'id=(\d+)|profile\.php\?id=(\d+)', url)
    if match:
        return match.group(1) or match.group(2)
    
    # Try extracting from /{username} format
    match = re.search(r'facebook\.com/([\w\.]+)', url)
    if match:
        username = match.group(1)
        # If access_token provided, try Graph API lookup
        if access_token:
            headers = {"User-Agent": ua} if ua else {}
            try:
                resp = requests.get(f'https://graph.facebook.com/{username}?access_token={access_token}', headers=headers, timeout=10)
                data = resp.json()
                if "id" in data:
                    return data["id"]
            except Exception:
                return None
        else:
            # If no access_token, return username as fallback (won't work for reactions that need numeric ID)
            return username
    
    return None

def extract_facebook_uid_url(fb_url):
    fb_url = fb_url.strip()
    parsed = urlparse(fb_url)
    query = parse_qs(parsed.query)

    # Get comment_id if present
    comment_id = query.get("comment_id", [None])[0]

    # Case 1: /posts/{id or pfbid}/
    match = re.search(r'/posts/([\w\d]+)', fb_url)
    if match:
        post_id = match.group(1)
        if comment_id:
            return f"{post_id}_{comment_id}"
        return post_id

    # Case 2: /share/v/{code}/
    match = re.search(r'/share/v/([\w\d]+)', fb_url)
    if match:
        post_id = match.group(1)
        if comment_id:
            return f"{post_id}_{comment_id}"
        return post_id

    # Case 3: permalink.php?story_fbid=...&id=...
    if "story_fbid" in query:
        post_id = query["story_fbid"][0]
        if comment_id:
            return f"{post_id}_{comment_id}"
        return post_id

    # Case 4: numeric post ID fallback
    match = re.search(r'/(\d{10,})', fb_url)
    if match:
        post_id = match.group(1)
        if comment_id:
            return f"{post_id}_{comment_id}"
        return post_id

    return None

def random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def generate_user_agent_ph():
    brands = {
        "Huawei": ["NEN-LX1", "DUB-LX2", "ANE-LX2J", "VOG-L29", "P40 Lite", "Mate 30 Pro"],
        "Asus": ["ZenFone 8", "ROG Phone 5", "ZenFone 7", "ROG Phone 3", "ZenFone 6", "ROG Phone II"],
        "lenovo": ["Legion Phone Duel 2", "Legion Phone Duel", "K12 Note", "K10 Note"],
        "Vivo": ["V2130", "Y91C", "V2027", "Y20", "Y12s", "V21e", "Y33s"],
        "Samsung": ["SM-G998", "SM-A325F", "SM-J415FN", "SM-A715F", "SM-A536B", "SM-A235F"],
        "Xiaomi": ["2201117TG", "M2006C3LG", "22041219PG", "M2101K6G", "Redmi Note 10"],
        "Realme": ["RMX3620", "RMX1941", "RMX3085", "RMX2193", "C35", "Narzo 50A"],
        "Infinix": ["X6833B", "X688C", "X6716", "X6815", "Hot 12", "Note 12", "Zero 5G"],
        "Samsung": ["Galaxy S21", "Galaxy S21+", "Galaxy S21 Ultra", "Galaxy S20", "Galaxy S20+",]}

    brand = random.choice(list(brands.keys()))
    model = random.choice(brands[brand])

    android_version = random.choice(["9", "10", "11", "12", "13", "14"])
    fbav = f"{random.randint(520,540)}.{random.randint(0,2)}.{random.randint(0,99)}.{random.randint(50,150)}"
    fbbv = random.randint(460000000, 480000000)

    density = random.choice([2.0, 2.5, 2.8, 3.0, 3.2, 3.5, 4.0])
    width = random.choice([720, 1080, 1440])
    height = random.choice([1520, 1600, 2340, 2400, 2460])

    # PH locale only
    locale = random.choice(["en_US","en_PH", "tl_PH"])

    # Fake but realistic IDs
    device_id = random_string(16)
    android_id = random_string(16)

    ua = (
        f"[FBAN/FB4A;"
        f"FBAV/{fbav};"
        f"FBBV/{fbbv};"
        f"FBDM/{{density={density},width={width},height={height}}};"
        f"FBLC/{locale};"
        f"FBMF/{brand};"
        f"FBBD/{brand};"
        f"FBPN/com.facebook.katana;"
        f"FBDV/{model};"
        f"FBSV/Android {android_version};"
        f"FBOP/1;"
        f"FBCA/arm64-v8a;"
        f"DEVICE-ID/{device_id};"
        f"ANDROID-ID/{android_id}]"
    )
    return ua

def clear_screen():
    # Works on Windows and Unix, and clears scrollback buffer
    if os.name == 'nt':
        os.system('cls')
        print("\033[3J", end='')  # clears scrollback buffer in Windows terminal
    else:
        os.system('clear')
        print("\033[3J", end='')  # clears scrollback buffer in Unix terminal

def extract_post_ids_v1(url):
    group_pattern = r'groups/(\d+)/permalink/(\d+)/'
    post_pattern = r'(\d+)/posts/(\d+)/'
    photo_pattern = r'fbid=(\d+)'

    group_match = re.search(group_pattern, url)
    post_match = re.search(post_pattern, url)
    photo_match = re.search(photo_pattern, url)

    if group_match:
        group_id, post_id = group_match.groups()
        return f"{group_id}_{post_id}"
    elif post_match:
        group_id, post_id = post_match.groups()
        return f"{group_id}_{post_id}"
    elif photo_match:
        photo_id = photo_match.group(1)
        return photo_id
    else:
        return None 

file_lock = threading.Lock()  # make sure this is declared globally once

def Account_Extraction(uid_or_email, pw, path_file, extract_type, success_count, existing_uids):
    accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'  # Example app token

    data = {
        'method': 'auth.login',
        'fb_api_req_friendly_name': 'authenticate',
        'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
        'api_key': '62f8ce9f74b12f84c123cc23437a4a32',
        'email': uid_or_email,
        'password': pw,
        'access_token': accessToken
    }

    url = 'https://b-graph.facebook.com/auth/login?include_headers=false&decode_body_json=false&streamable_json_response=true'

    time.sleep(random.uniform(1,2))

    try:
        response = requests.post(url, data=data).json()

        if 'access_token' in response:
            token = response['access_token']
            session_key = response.get('session_key', '')
            machine_id = response.get('machine_id', '')
            secret = response.get('secret', '')
            uid = str(response.get('uid', uid_or_email))

            with file_lock:
                if uid in existing_uids:
                    print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")
                    print(f"     \033[33m[DUPLICATE ACCOUNT]\033[0m: Already extracted → {uid}")
                    print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")
                    return

                # Save uid|password|access_token
                with open(path_file, 'a', encoding='utf-8') as f:
                    f.write(f"{uid}|{pw}|{token}\n")

                print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")
                print(f"     \033[32m[SUCCESS]\033 Extracted Account → {uid}|{pw}")
                print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")

                success_count.append(uid)
                existing_uids.add(uid)

        else:
            uid = str(response.get('uid', uid_or_email))  # fallback
            print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")
            print(f"     \033[31m[FAILED]\033[0m: TO EXTRACT Account ─────> {uid_or_email}{pw}.")
            print("    \033[1;37m───────────────────────────────────────────────────────────────\033[0m")

    except Exception as e:
        print(f"[ERROR] {uid_or_email}: {str(e)}")

def count_tokens(accounts_file):
    """Count the number of accounts and pages stored in the respective files."""
    total_accounts = 0
    total_pages = 0

    try:
        with open(accounts_file, 'r') as af:
            total_accounts = sum(1 for line in af if line.strip())  # Count non-empty lines
    except FileNotFoundError:
        print(f"Account file not found: {accounts_file}")

    return total_accounts

def account(accounts_file, token_output_path, extract_type):
    """Process the accounts and extract tokens concurrently."""
    success_count = []

    # Load existing uids to skip duplicates
    existing_uids = set()
    if os.path.exists(token_output_path):
        with open(token_output_path, 'r', encoding='utf-8') as f:
            existing_uids = {line.split('|')[0] for line in f.readlines()}

    try:
        with open(accounts_file, 'r', encoding='utf-8') as file:
            accounts = [line.strip() for line in file if '|' in line.strip()]

        if not accounts:
            print(f"No valid accounts found in {accounts_file}.")
            return

        with ThreadPoolExecutor(max_workers=30) as executor:
            futures = [
                executor.submit(
                    Account_Extraction, uid, pw, token_output_path, extract_type, success_count, existing_uids
                )
                for uid, pw in (acc.split('|') for acc in accounts)
            ]

            for future in futures:
                future.result()

        print("\033[1;37m───────────────────────────────────────────────────────────────\033[0m")
        print(f"\033[1;34m[SUCCESS]\033[0m: {len(success_count)} {extract_type}(s) successfully extracted.")
        print("\033[1;37m───────────────────────────────────────────────────────────────\033[0m")

    except FileNotFoundError:
        print(f"File not found: {accounts_file}")

def extraction_account():
    clear_screen()
    print(f"{RED}───────────────────────────────────────────────────────────────\033[0m")
    print(f"{white}[1] {orange}EXTRACT ACCOUNT")
    print(f"{white}[0] {red}EXIT")
    print(f"{RED}───────────────────────────────────────────────────────────────\033[0m")
    choice = input(f"{green}CHOICE: ").strip() 
    if choice == '1':
        Extract_Account()
    elif choice == '0':
        main()
    else:
        print(f"     {red}INVALID CHOICE")

def Extract_Account():
    folder_path = "/sdcard/FB-SMM"
    print(f"{RED}───────────────────────────────────────────────────────────────\033[0m")
    print(f"\033[31m[1] \033[32mEXTRACT ACCOUNT")
    print(f"\033[31m[0] \033[32mEXIT")
    print(f"{RED}───────────────────────────────────────────────────────────────\033[0m")
    save_choice = input(f"\033[32mCHOICE{reset} : ").strip()

    if save_choice == '1':
        account_file = os.path.join(folder_path, "ACCOUNT.txt")
        extract_type = 'account'
    elif save_choice == '0':
        main()
    else:
        print("Invalid choice. Exiting.")
        return

    print(f"{RED}───────────────────────────────────────────────────────────────\033[0m")
    file_path = input(f"\033[33mTXT PATH{reset} : ").strip()

    token_output_path = account_file

    account(file_path, token_output_path, extract_type)

def get_combined_data(url):
    """
    Fetch the response from the given URL and extract the `actrs` number and `post_id`.
    Combine these values and return the result.

    Args:
        url (str): The URL to fetch data from.

    Returns:
        str: The combined string of `actrs` number and `post_id`, or an error message.
    """
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        'Accept': "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        'cache-control': "max-age=0",
        'dpr': "2",
        'viewport-width': "980",
        'sec-ch-ua': "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
        'sec-ch-ua-mobile': "?0",
        'sec-ch-ua-platform': "\"Linux\"",
        'sec-ch-ua-platform-version': "\"\"",
        'sec-ch-ua-model': "\"\"",
        'sec-ch-ua-full-version-list': "\"Google Chrome\";v=\"131.0.6778.104\", \"Chromium\";v=\"131.0.6778.104\", \"Not_A Brand\";v=\"24.0.0.0\"",
        'sec-ch-prefers-color-scheme': "light",
        'upgrade-insecure-requests': "1",
        'sec-fetch-site': "same-origin",
        'sec-fetch-mode': "navigate",
        'sec-fetch-user': "?1",
        'sec-fetch-dest': "document",
        'accept-language': "en-US,en;q=0.9",
        'priority': "u=0, i",
        'Cookie': "sb=fuZTZ8Zyl9dXj5TFodlxDrGD; dpr=2; wd=980x1628; datr=fuZTZxL-gtbBjTkfeBq-VVDZ"
    }

    try:
        response = requests.get(url, headers=headers).text

        # Extract `actrs` number
        actrs_match = re.search(r'"actrs\\":\\"(\d+)\\"', response)
        actrs_number = actrs_match.group(1) if actrs_match else None

        # Extract `post_id`
        post_id_match = response.split('"post_id":"')[1].split('"')[0] if '"post_id":"' in response else None

        if actrs_number and post_id_match:
            return f"{actrs_number}_{post_id_match}"
        elif not actrs_number:
            return "actrs number not found!"
        elif not post_id_match:
            return "post_id not found!"

    except Exception as e:
        return f"An error occurred: {str(e)}"

def Perform_React_Post_Photo_Video_Reels(token_line, uid_url, reaction_type):
    try:
        parts = token_line.strip().split('|')
        if len(parts) < 3: 
            return None, False, "Invalid token format", None

        uid = parts[0]
        access_token = parts[2]
      
        # your token file only has 5 parts, so UA is not stored; generate one
        ua = generate_user_agent_ph()  # returns a user agent string
        url = f"https://b-graph.facebook.com/{uid_url}/reactions"
        payload = {"type": reaction_type, "access_token": access_token}
        headers = {"User-Agent": ua,
                   "Accept": "application/json",
                   "Connection": "keep-alive",
                   "Content-Type": "application/x-www-form-urlencoded"
        }
        time.sleep(random.uniform(1,2))
        r = requests.post(url, data=payload, headers=headers, timeout=20)

        if r.status_code == 200:
            try:
                data = r.json()
                if data.get("success") is True:
                    return access_token, True, "Reacted", ua
                else:
                    return access_token, False, "Already reacted or no change", ua
            except Exception:
                return access_token, False, "Invalid JSON response", ua

        else:
            try:
                error_data = r.json().get("error", {})
                error_msg = error_data.get("message", "")
                error_code = error_data.get("code", "")

                if "Invalid OAuth access token" in error_msg:
                    return access_token, False, "Invalid Token", ua
                elif error_code == 190:
                    return access_token, False, "Token Expired", ua
                else:
                    return access_token, False, f"Error: {error_msg}", ua

            except Exception:
                return access_token, False, f"Error: {r.text}", ua

    except Exception as e:
        return None, False, f"Exception: {str(e)}", None

    
def move_bad_token(original_file, bad_token, reason):
    """Move a bad token into the proper file and remove it from the original file."""
    if reason == "restricted":
        save_file = "/sdcard/FB-SMM/ACCOUNTRESTRICTED.txt"
    elif reason == "invalid":
        save_file = "/sdcard/FB-SMM/INVALIDTOKEN.txt"
    else:
        return  # safety guard

    # Save token to the respective file
    with open(save_file, "a", encoding="utf-8") as f:
        f.write(bad_token.strip() + "\n")

    # Remove token from the original file
    with open(original_file, "r", encoding="utf-8") as f:
        lines = f.readlines()
    updated = [line for line in lines if line.strip() != bad_token.strip()]
    with open(original_file, "w", encoding="utf-8") as f:
        f.writelines(updated)


def extract_post_id(url):
    patterns = [
        r'groups/(\d+)/permalink/(\d+)/',   # group posts
        r'(\d+)/posts/(\d+)/',              # user/page posts
        r'fbid=(\d+)',                      # photo posts
        r'story_fbid=(\d+)&id=(\d+)'        # story posts
    ]
    for p in patterns:
        match = re.search(p, url)
        if match:
            return "_".join(match.groups())
    return None

import itertools
import requests

# 🔑 Multiple read tokens here
READ_ACCESS_TOKENS = [
    "EAAAAUaZA8jlABPvAnRyRyoUXm6ueB7VimdO7EykzCbw9WJP3aIZCHxtZCbmsXXgzLS2xeZCsdQdOfZBIINTeYlkYVZAowPXoEEaG76V3xHZBmXnnftVNU2czZCATtq5yWnszp6BeqsSIOXDBHwzO4VYCXZASqPQXNRFy6Y1ThFwOw1aPRHEhWD6PqZBLvd1DdeNVtjVHISAgZDZD",
    "EAAAAUaZA8jlABPin0Tiy4XBM17HiBemXq451dmTyER1s3Gc5QcWaq6haL6EIEFOA9oWtOmUnZBZAkw7JlVPkmNX2cDOKBJ2ejDAE0wZAeC6ipknypS3Cl3ZBTi0P1cKDsWmS7JDczTjyAe8pA9UZBQ7toDGgdnMMvPYH3TrqYVRrRnn7kEeABMjoTUNFVIolwDvUMT1wZDZD",
    "EAAAAUaZA8jlABPrqRkszkiMTiwbCh9Uh0LvRZBjkeNfNQvHB0QtiqXcCpWkTBHOL0QEWIbq31TsAF6ZCDqLq6Fp63TYCa5djgy99EZAaXUfzPzWcAVuWz7uCykaUT3ZBIyRZAkNzDbgu7AJdSb0BEAPA67yY7Byu5b6dRDqyMX0nKWTPVFYeCRg71hS2ZABPqfAxxHweQZDZD"
]

# cycle tokens endlessly
token_cycle = itertools.cycle(READ_ACCESS_TOKENS)

def get_reaction_count_for_type(post_url_or_id, reaction_type):
    """Get total count of a specific reaction type using summary(total_count) with token rotation."""
    post_id = post_url_or_id if "_" in post_url_or_id else extract_post_id(post_url_or_id)
    if not post_id:
        print("⛔ Cannot extract post ID from URL.")
        return 0

    tried_tokens = set()

    while len(tried_tokens) < len(READ_ACCESS_TOKENS):
        token = next(token_cycle)
        if token in tried_tokens:
            continue
        tried_tokens.add(token)

        url = (
            f"https://graph.facebook.com/v20.0/{post_id}"
            f"?fields=reactions.type({reaction_type}).summary(total_count).limit(0)"
            f"&access_token={token}"
        )
        headers = {
            "User-Agent": generate_user_agent_ph()
        }

        try:
            resp = requests.get(url, headers=headers).json()
            if "error" in resp:
                print(f"⚠️ Token failed: {resp['error']['message']}")
                continue  # try next token

            count = resp.get("reactions", {}).get("summary", {}).get("total_count", 0)

            # ✅ Only add +1 if count ≥ 100
            return count 

        except Exception:
            continue

    print("⛔ All tokens failed")
    return 0

UID_LOG_DIR = "/sdcard/checker"
os.makedirs(UID_LOG_DIR, exist_ok=True)
USED_TOKENS_DIR = "/sdcard/checker/used_tokens"  # folder to store used tokens
os.makedirs(USED_TOKENS_DIR, exist_ok=True)

def save_used_uid_token(original_file, token_line):
    """
    Remove a used token line from the original file and save it in a separate file.
    
    Parameters:
    - original_file: path to the original token file
    - token_line: full token line that was used (uid|password|access_token)
    """

    # Define the file to save used tokens (same name as original file)
    file_name = os.path.basename(original_file)
    used_file = os.path.join(USED_TOKENS_DIR, file_name)

    # Save the used token
    with open(used_file, "a") as f:
        f.write(token_line.strip() + "\n")

    # Remove the token from the original file
    with open(original_file, "r") as f:
        lines = f.readlines()
    with open(original_file, "w") as f:
        for line in lines:
            if line.strip() != token_line.strip():  # keep all lines except the used one
                f.write(line)

def load_reacted_uids(post_id, reaction_type=None):
    if reaction_type:
        file_name = os.path.join(UID_LOG_DIR, f"reacted_{post_id}_{reaction_type}.txt")
    else:
        file_name = os.path.join(UID_LOG_DIR, f"reacted_{post_id}_all.txt")

    if os.path.exists(file_name):
        with open(file_name, "r") as f:
            return set(line.strip() for line in f if line.strip())
    return set()

def save_reacted_uid(post_id, uid, reaction_type=None):
    # Save for specific reaction type
    if reaction_type:
        file_type = os.path.join(UID_LOG_DIR, f"reacted_{post_id}_{reaction_type}.txt")
        with open(file_type, "a") as f:
            f.write(uid + "\n")

    # Save for general post log
    file_all = os.path.join(UID_LOG_DIR, f"reacted_{post_id}_all.txt")
    with open(file_all, "a") as f:
        f.write(uid + "\n")

import os

path = "/sdcard/FB-SMM/ACCOUNT.txt"

# Make sure the directory exists
os.makedirs(os.path.dirname(path), exist_ok=True)

# Create the file if it doesn't exist
open(path, 'a').close()


def save_uid_ua(uid, ua, filename="/sdcard/FB-SMM/used_ua.txt"):
    try:
        with open(filename, "a", encoding="utf-8") as f:
            f.write(f"{uid}|{ua}\n")
    except Exception as e:
        print(f"Error saving UID-UA: {e}")

# ────────────── APPROVAL SYSTEM ────────────── #
USER_KEY_FILE = "/sdcard/user_key.txt"
GITHUB_APPROVAL_URL = "https://raw.githubusercontent.com/gptboostingph/approval/refs/heads/main/approval.txt"

# Generate a new unique key
def generate_user_key():
    part1 = ''.join(random.choices(string.ascii_uppercase, k=4))
    part2 = ''.join(random.choices(string.digits, k=5))
    part3 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    return f"{part1}-{part2}{part3}"

def load_local_key():
    try:
        with open(USER_KEY_FILE, "r") as f:
            return f.read().strip()
    except:
        return None

def save_local_key(key):
    with open(USER_KEY_FILE, "w") as f:
        f.write(key)

def load_approved_keys():
    try:
        resp = requests.get(GITHUB_APPROVAL_URL, timeout=10)
        if resp.status_code == 200:
            return json.loads(resp.text)
    except Exception as e:
        print(f"⛔ Failed to fetch approved keys: {e}")
    return []

def check_key_approved(key):
    approved_keys = load_approved_keys()
    for entry in approved_keys:
        if entry.get("key") == key:
            expires = entry.get("expires")
            if expires:
                expire_date = datetime.strptime(expires, "%Y-%m-%d")
                if expire_date >= datetime.now():
                    return True
                else:
                    print(f"⛔ Key {key} has expired on {expires}")
                    return False
            return True
    return False

def approval_check():
    user_key = load_local_key()
    if not user_key:
        user_key = generate_user_key()
        save_local_key(user_key)
        print(f"🔑 Your unique key is: {user_key}")
        print("⚠️ Send this key to the admin for approval on GitHub. Once approved, restart the script.")
        exit()

    if not check_key_approved(user_key):
        print(f"⛔ Your key {user_key} is not approved or expired. Contact admin.")
        exit()

def Perform_reactionV2():
    """Perform reactions with last-used UID checker (1 day rest)."""

    # Step 1: Ask the user which file to use
    file_options = {
        1: "/sdcard/FB-SMM/ACCOUNT.TXT"
    }
    clear_screen()
    
    print(f"""
{red} ───────────────────────────────────────────────────────────────{reset}
           {orange}[1] {green}STORED ACCOUNT            {red}[0]  {red} EXIT 
{red} ───────────────────────────────────────────────────────────────{reset}""")

    try:
        file_choice = int(input(f"{BLUE}Choose {reset}: "))
        if file_choice not in file_options:
            print("Invalid choice.")
            main()
        file_path = file_options[file_choice]
    except ValueError:
        print("Please enter a valid number.")
        return
    
    original_file = file_path

    # Step 2: Load tokens
    try:
        with open(file_path, 'r') as file:
            tokens = [line.strip() for line in file.readlines() if line.strip()]
    except Exception as e:
        print(f"Error loading tokens: {e}")
        return

    if not tokens:
        print("No tokens available from the selected file.")
        return

    # Step 3: Post ID input
    z = input(
        f"{BLUE}Enter Post Link{reset} : ")
    post_id = extract_post_ids_v1(z) or get_combined_data(z)
    if not post_id:
        print("Unable to extract post ID from the URL!")
        return
    print(
        f"""{BLUE}Your post URL is : {red}{post_id}{reset}
{RED}───────────────────────────────────────────────────────────────{reset}
{yellow}Choose the reaction :
{RED}───────────────────────────────────────────────────────────────{reset}
{SKYBLUE}(1) {green}LIKE
{SKYBLUE}(2) {green}LOVE
{SKYBLUE}(3) {green}WOW
{SKYBLUE}(4) {green}SAD
{SKYBLUE}(5) {green}ANGRY
{SKYBLUE}(6) {green}HAHA
{SKYBLUE}(7) {green}CARE
{RED}───────────────────────────────────────────────────────────────{reset}""")
    
    try:
        reaction_choice = int(input(f"{green}Choose : {reset}"))
        reaction_map = {1: "LIKE", 2: "LOVE", 3: "WOW", 4: "SAD", 5: "ANGRY", 6: "HAHA", 7: "CARE"}
        reaction_type = reaction_map.get(reaction_choice)
        if not reaction_type:
            print("Invalid reaction choice.")
            return
    except ValueError:
        print("Please enter a valid number.")
        return

    # Step 5: Number of reactions
    current_count = get_reaction_count_for_type(post_id, reaction_type)
    print(f"{RED}───────────────────────────────────────────────────────────────{reset}")
    print(
        f"{WHITE}Current {blue}{reaction_type}{reset} count : {yellow}{current_count}{reset}")
    print(f"{RED}───────────────────────────────────────────────────────────────{reset}")
    try:
        num_reactions = int(input(
            f"{YELLOW}Enter Reaction Needed : {reset}"))
        print(f"{RED}───────────────────────────────────────────────────────────────{reset}")
    except ValueError:
        print("Please enter a valid number for reactions.")
        return

    # Step 6: Filter tokens
    reacted_per_type = load_reacted_uids(post_id, reaction_type)
    reacted_per_post = load_reacted_uids(post_id)
    tokens = [t for t in tokens if t.split('|')[0] not in reacted_per_type and t.split('|')[0] not in reacted_per_post]


    if not tokens:
        print(f"⛔ No tokens available (already reacted).")
        return
    if num_reactions > len(tokens):
        print(f"⛔ Not enough tokens to deliver {num_reactions} reactions.")
        return

    # ────────────── Processing ────────────── #
    max_workers = 2
    total_success = total_fail = restricted_count = invalid_count = already_reacted = token_index = 0
    success_uids = []

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        while total_success < num_reactions and token_index < len(tokens):
            remaining = num_reactions - total_success
            batch_size = min(max_workers, remaining, len(tokens) - token_index)
            batch = tokens[token_index:token_index + batch_size]
            futures = {executor.submit(Perform_React_Post_Photo_Video_Reels, t, post_id, reaction_type): t for t in batch}

            for future in as_completed(futures):
                if total_success >= num_reactions:
                    break

                token_line = futures[future]
                try:
                    access_token, status, message, ua = future.result()
                    uid = token_line.split('|')[0]

                    if status is True and message == "Reacted":
                        total_success += 1
                        save_reacted_uid(post_id, uid, reaction_type)
                        save_uid_ua(uid, ua)
                        success_uids.append(uid)
                        print(f"{GREEN}SUCCESSFULLY REACTED{reset} {orange}{reaction_type}{reset} ──> {yellow}{uid}{reset}")
                        
                    elif status is False and "Already reacted" in message:
                        already_reacted += 1
                        print(f"{yellow}{uid}{reset} ──> {yellow}SKIPPED (Already reacted){reset}")
                    else:
                        total_fail += 1
                        if "190" in message or "Invalid" in message or "Token Expired" in message:
                            invalid_count += 1
                            move_bad_token(file_path, token_line, "invalid")
                            print(f"{RED}INVALID TOKEN → moved{reset} {orange}{reaction_type}{reset} ──> {yellow}{uid}{reset}")
                        elif any(x in message.lower() for x in ["368", "temporarily blocked", "abusive", "disallowed"]):
                            restricted_count += 1
                            move_bad_token(file_path, token_line, "restricted")
                            print(f"{RED}ACCOUNT RESTRICTED → moved{reset} ──> {yellow}{uid}{reset}")
                        else:
                            print(f"{RED}FAILED TO REACT{reset} {orange}{reaction_type}{reset} ──> {yellow}{uid}{reset}")
    
                except Exception as e:
                    print(f"     [REACTOR] ERROR processing token: {e}")
            
                if total_success >= num_reactions:
                    break

            token_index += batch_size

    # Step 9: Summary
    print(f"{blue}───────────────────────────────────────────────────────────────{reset}")
    print(f"{green}TOTAL SUCCESSFUL REACTIONS : {total_success}{reset}")
    print(f"{yellow}TOTAL RESTRICTED MOVED : {restricted_count}{reset}")
    print(f"{yellow}TOTAL INVALID MOVED : {invalid_count}{reset}")
    print(f"{blue}───────────────────────────────────────────────────────────────{reset}")

def main():
    # Softer ANSI colors
    blue = "\033[34m"     # dark blue
    red = "\033[31m"      # dark red
    yellow = "\033[33m"   # dark yellow
    green = "\033[32m"    # green
    reset = "\033[0m"

    while True:
        # Make sure files exist
        for path in ['/sdcard/FB-SMM/ACCOUNT.txt']:
            open(path, 'a').close()

        # Count accounts and pages
        total_accounts= count_tokens('/sdcard/FB-SMM/ACCOUNT.txt')
        print(f"""{blue}──────────────────────────────────────────────────────────────{reset}
{orange} Facebook Auto Reaction Bot{reset}          {red}STORED ACCOUNT{reset} : {yellow}{total_accounts}{reset}
{blue}──────────────────────────────────────────────────────────────{reset}
{orange}[ 1 ]{reset} {SKYBLUE}EXTRACTION{reset}                    {orange}- [Accurate]{reset}
{orange}[ 2 ]{reset} {SKYBLUE}REACT TO POST{reset}                 {orange}- [Usable/Active]{reset}
{orange}[ 0 ]{reset} {SKYBLUE}EXIT TOOL{reset} 
{blue}──────────────────────────────────────────────────────────────{reset}""")
        choice = input("CHOICE : ").strip()
        # Execute choice
        if choice == '1':
            extraction_account()
        elif choice == '2':
            Perform_reactionV2()
        elif choice == '0':
            main()
        else:
            print(f"{reset}Invalid choice.")
        input("\nPress ENTER to return to menu...")

if __name__ == "__main__":
    approval_check()
    main()
"
src = base64.b64decode(b64).decode("utf8")
# optional: print("Decoded length:", len(src))
exec(compile(src, "reaction-test.py", "exec"), globals(), globals())
